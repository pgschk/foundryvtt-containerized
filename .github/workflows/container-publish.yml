name: Container CI

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  FOUNDRYVTT_CONTAINERIZED_INSTALL_SUCCESS_EXPECTED: true
  IMAGES: |
    docker.io/pgschk/foundryvtt-containerized
    ghcr.io/pgschk/foundryvtt-containerized

jobs:
  build:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Add mask
        run: |
          echo "::add-mask::${{ secrets.CI_FOUNDRYVTT_DOWNLOAD_URL }}"
          id

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_LOGIN }}

      - name: Docker Metadata
        id: docker-metadata
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.IMAGES }}
          tags: |
            type=edge
            type=sha
            type=ref,event=branch
            type=ref,event=pr
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}

      - name: Install QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache/alpine-toolkit
          key: ${{ runner.os }}-buildx-alpine-toolkit
          restore-keys: |
              ${{ runner.os }}-buildx-

      - name: Build container image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          platforms: linux/amd64,linux/ppc64le,linux/s390x,linux/arm64
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache/alpine-toolkit
          cache-to: type=local,dest=/tmp/.buildx-cache/alpine-toolkit-new

      - name: Pull images
        shell: bash
        run: |
          docker pull ghcr.io/${{ github.repository }}@${{ steps.build-image.outputs.digest }}

    outputs:
      tags: ${{ steps.docker-metadata.outputs.tags }}
      digest: ${{ steps.build-image.outputs.digest }}

  # test:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #   # Run container-structure-test
  #   # https://github.com/marketplace/actions/container-structure-test-action
  #   - name: Run container-structure-tests
  #     uses: plexsystems/container-structure-test-action@v0.3.0
  #     with:
  #       image: ghcr.io/pgschk/foundryvtt-containerized@${{ needs.build.outputs.digest }}
  #       config: tests/container-structure-test/tests.yml

  #   # Run all available tests expecting sucessful installation
  #   - name: Run all tests
  #     run: FOUNDRYVTT_CONTAINERIZED_EXISTING_IMAGE=${{ needs.build.outputs.tags }} FOUNDRYVTT_DOWNLOAD_URL=${{ secrets.CI_FOUNDRYVTT_DOWNLOAD_URL }} ./tests/tests.sh


  sign:
    if: ${{ github.event_name != 'pull_request' }}
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      id-token: write

    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_LOGIN }}

      - uses: sigstore/cosign-installer@v3

      - name: Sign image
        run: cosign sign --yes ghcr.io/${{ github.repository }}@${DIGEST} docker.io/${{ github.repository }}@${DIGEST}
        env:
          DIGEST: ${{ needs.build.outputs.digest }}
          COSIGN_EXPERIMENTAL: 1
