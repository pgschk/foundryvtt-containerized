name: Container CI

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  FOUNDRYVTT_CONTAINERIZED_INSTALL_SUCCESS_EXPECTED: true
  IMAGES: |
    docker.io/pgschk/foundryvtt-containerized
    ghcr.io/pgschk/foundryvtt-containerized

jobs:
  build:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Add mask
        run: |
          echo "::add-mask::${{ secrets.CI_FOUNDRYVTT_DOWNLOAD_URL }}"
          id

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Docker Metadata
        id: docker-metadata
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.IMAGES }}
          tags: |
            type=edge
            type=sha
            type=ref,event=branch
            type=ref,event=pr
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          layers: false
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
          containerfiles: |
            ./Dockerfile
          extra-args: |
            --pull
            --ulimit nofile=4096:4096

      - name: Echo Outputs
        run: |
          echo "Image: ${{ steps.build_image.outputs.image }}"
          echo "Tags: ${{ steps.build_image.outputs.tags }}"
          echo "Tagged Image: ${{ steps.build_image.outputs.image-with-tag }}"

      # Check if image is build
      - name: Check images created
        run: buildah images | grep '${{ env.IMAGES }}'

      - name: Check image metadata
        run: |
          set -x
          buildah inspect ${{ steps.build_image.outputs.image-with-tag }} | jq '.OCIv1.config.Labels."org.opencontainers.image.title"'
          buildah inspect ${{ steps.build_image.outputs.image-with-tag }} | jq '.OCIv1.config.Labels."org.opencontainers.image.description"'
          buildah inspect ${{ steps.build_image.outputs.image-with-tag }} | jq '.Docker.config.Labels."org.opencontainers.image.title"'
          buildah inspect ${{ steps.build_image.outputs.image-with-tag }} | jq '.Docker.config.Labels."org.opencontainers.image.description"'

      - name: Export image to docker
        run: |
          buildah push ${{ steps.build_image.outputs.image-with-tag }} docker-daemon:${{ steps.build_image.outputs.image-with-tag }}

      # Run container-structure-test
      # https://github.com/marketplace/actions/container-structure-test-action
      - name: Run container-structure-tests
        uses: plexsystems/container-structure-test-action@v0.3.0
        with:
          image: ${{ steps.build_image.outputs.image-with-tag }}
          config: tests/container-structure-test/tests.yml

      # Run all available tests expecting sucessful installation
      - name: Run all tests
        run: FOUNDRYVTT_CONTAINERIZED_EXISTING_IMAGE=${{ steps.build_image.outputs.image-with-tag }} FOUNDRYVTT_DOWNLOAD_URL=${{ secrets.CI_FOUNDRYVTT_DOWNLOAD_URL }} ./tests/tests.sh

      - name: Podman log in to docker.io
        uses: redhat-actions/podman-login@v1
        with:
          registry: docker.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_LOGIN }}

      - name: Podman log in to ghcr.io
        uses: redhat-actions/podman-login@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker log in to docker.io
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_LOGIN }}

      - name: Docker log in to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Images
        id: push
        if: ${{ github.event_name != 'pull_request' }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}

      - name: Print image url
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "Image pushed to ${{ steps.push.outputs.registry-paths }}"

      - uses: sigstore/cosign-installer@v3.3.0
        if: ${{ github.event_name != 'pull_request' }}

      - name: Sign container image (keyless)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cosign sign -y ${{ steps.build_image.outputs.image-with-tag }}@${{ steps.push.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: 1
